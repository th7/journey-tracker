var gmap = {
  initialize: function(inputs) {
    console.log('gmap.initialize');
    google.maps.visualRefresh = true;

    this.map = this.buildMap();
    gmap.overlay = gmap.buildOverlay();
  },

  map: null,

  buildMap: function() {
    console.log('gmap.buildMap');
    var mapType = google.maps.MapTypeId.ROADMAP;
    var styles = [
      {
        stylers: [
          { saturation: -70 },
          { gamma: 1.5 }
        ]
      }
    ];

    var mapOptions = { 
      center: new google.maps.LatLng(41.85, -87.65),
      zoom: 8,
      mapTypeId: mapType,
      styles: styles,
      disableDoubleClickZoom: true,
      draggable: true,
      keyboardShortcuts: true,
      mapTypeControl: true,
      panControl: true,
      scrollwheel: true,
      streetViewControl: true,
      zoomControl: true
    };

    return new google.maps.Map(
      document.getElementById("map-canvas"), mapOptions
    );
  },

  overlay: null,
  projection: null,

  buildOverlay: function() {
    console.log('gmap.buildOverlay')
    var overlay = new google.maps.OverlayView();
    overlay.setMap(this.map);
    overlay.onAdd = function() {
      gmap.projection = this.getProjection();
      mapReady();
    };
    overlay.draw = function() { 
      if (!this.ready) { 
          this.ready = true; 
          google.maps.event.trigger(this, 'ready');
      } 
      // google.maps.event.trigger(gmap.overlayReady, 'ready');
    };
    console.log(overlay);
    return overlay;
  },

  SlowWorker: {
    queue: [],

    running: false,

    enqueueAddRoute: function(places) {
      // console.log('SlowWorker.enqueueAddRoute');
      this.queue.push(places);
      if (!this.running) {
        this.running = true;
        setTimeout(this.poll, 100);
      }
    },

    process: function(places) {
      // console.log('SlowWorker.process');
      if (places.length > 10) {
        throw 'too many waypoints'
      }

      var origin = places[0];
      var destination = places[places.length - 1];
      var waypoints = [];

      for(var i=1; i < places.length - 1; i++) {
        waypoints.push( { location: places[i], stopover: true } );
      }

      var router = new google.maps.DirectionsService();
      var routeOptions = {
        origin: origin,
        destination: destination,
        waypoints: waypoints,
        travelMode: google.maps.TravelMode.DRIVING
      };

      router.route(routeOptions, this.handleResult);
    },

    poll: function() {
      // console.log('SlowWorker.poll');
      if (gmap.SlowWorker.queue.length > 0) {
        gmap.SlowWorker.process(gmap.SlowWorker.queue[0]);
      } else {
        gmap.SlowWorker.running = false;
      }
    },

    handleResult: function(result, status) {
      // console.log('SlowWorker.handleResult');
      var resultPlaces = gmap.SlowWorker.queue.shift();

      if (gmap.SlowWorker.running) {
        setTimeout(gmap.SlowWorker.poll, 200);
      }

      if(status == google.maps.DirectionsStatus.OK) {
        gmap.renderRoute(result);
      } else {
        console.log('getting route failed with status: ' + status);
        gmap.drawPolyLine(resultPlaces);
      }
    }
  },

  buildRenderer: function() {
    rendererOptions = {
      draggable: true, // double check that we actually want this turned on
      markerOptions: { 
        visible: true
      },
      polylineOptions: {
        strokeColor: "#000000",
        strokeWeight: 3
      }
    };

    return new google.maps.DirectionsRenderer(rendererOptions);
  },

  renderRoute: function(result) {
    var renderer = this.buildRenderer();
    renderer.setMap(this.map);
    renderer.setDirections(result);
  },

  drawPolyLine: function(places) {
    polylineOptions = {
        strokeColor: "#000000",
        strokeWeight: 3,
        map: this.map,
        path: [places[0], places[1]]
    };

    new google.maps.Polyline(polylineOptions);
  },

  loadScript: function() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    console.log("<%= ENV['GMAP_KEY'] %>")
    script.src = "http://maps.googleapis.com/maps/api/js?key=<%= ENV['GMAP_KEY'] %>&sensor=false&callback=gmap.initialize";
    document.body.appendChild(script);
  },

  mapLoaded: function() {
    console.log('gmap.mapLoaded');
    
    // gmap.projection = gmap.overlay.getProjection();
  },

  getPixelPos: function(lat, lng) {
    var pxlocation = this.projection.fromLatLngToContainerPixel(
      new google.maps.LatLng(
          lat, lng
        )
    );
    return pxlocation;
  },

  getPixelPositions: function(coords) {
    pxlocations = [];
    for (i in coords) {
      pxlocations.push(
        this.getPixelPos(coords[i].lat, coords[i].lng)
      );
    }
    return pxlocations;
  },

  drawRoute: function(coords) {
    console.log('gmap.drawRoute');
    places = [];
    for (i in coords) {
      places.push(
        new google.maps.LatLng(
          coords[i].lat, coords[i].lng
        )
      );
    }

    this.SlowWorker.enqueueAddRoute(places);
  }

};

var mapReady = function() {
  console.log('mapReady');

  var photoCoords = readPhotosCoords();

  for(i in photoCoords) {
    if (i > 0) {
      gmap.drawRoute([photoCoords[i-1], photoCoords[i]])
    }
  }
};

var readPhotosCoords = function() {
  $photoContainers = $('.photo-container');
  var coords = [];
  for (var i = 0; i < $photoContainers.length; i++) {
    $div = $($photoContainers[i]);

    if ($div.data('lat')) {
      var endCoord = {
        lat: +$div.data('lat'),
        lng: +$div.data('lng')
      };

      coords.push(endCoord);
    }
  }

  return coords;
};

$(document).ready(function() {
  gmap.loadScript();
});