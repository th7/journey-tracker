var gmap = {
  initialize: function(inputs) {
    console.log('gmap.initialize');
    google.maps.visualRefresh = true;

    this.map = this.buildMap();
    gmap.overlay = gmap.buildOverlay();
  },

  map: null,

  buildMap: function() {
    console.log('gmap.buildMap');
    var mapType = google.maps.MapTypeId.ROADMAP;
    var styles = [
      {
        stylers: [
          { saturation: -70 },
          { gamma: 1.5 }
        ]
      }
    ];

    var mapOptions = { 
      center: new google.maps.LatLng(41.85, -87.65),
      zoom: 8,
      mapTypeId: mapType,
      styles: styles,
      disableDoubleClickZoom: true,
      draggable: true,
      keyboardShortcuts: true,
      mapTypeControl: true,
      panControl: false,
      scrollwheel: true,
      streetViewControl: false,
      zoomControl: false
    };

    return new google.maps.Map(
      document.getElementById("map-canvas"), mapOptions
    );
  },

  overlay: null,
  projection: null,

  buildOverlay: function() {
    console.log('gmap.buildOverlay')
    var overlay = new google.maps.OverlayView();
    overlay.setMap(this.map);
    overlay.onAdd = function() {
      gmap.projection = this.getProjection();
      // google.maps.event.addListener(gmap.map, 'zoom_changed', main.update);
      google.maps.event.addListener(gmap.map, 'bounds_changed', main.update);
      // google.maps.event.addListener(gmap.map, 'zoom_changed', main.update);
      // google.maps.event.addListener(gmap.map, 'zoom_changed', main.update);
      main.mapReady();
    };
    overlay.draw = function() { 
      if (!this.ready) { 
          this.ready = true; 
          google.maps.event.trigger(this, 'ready');
      } 
      // google.maps.event.trigger(gmap.overlayReady, 'ready');
    };
    console.log(overlay);
    return overlay;
  },

  SlowWorker: {
    queue: [],

    running: false,

    enqueueAddRoute: function(places) {
      // console.log('SlowWorker.enqueueAddRoute');
      this.queue.push(places);
      if (!this.running) {
        this.running = true;
        setTimeout(this.poll, 100);
      }
    },

    process: function(places) {
      // console.log('SlowWorker.process');
      if (places.length > 10) {
        throw 'too many waypoints'
      }

      var origin = places[0];
      var destination = places[places.length - 1];
      var waypoints = [];

      for(var i=1; i < places.length - 1; i++) {
        waypoints.push( { location: places[i], stopover: true } );
      }

      var router = new google.maps.DirectionsService();
      var routeOptions = {
        origin: origin,
        destination: destination,
        waypoints: waypoints,
        travelMode: google.maps.TravelMode.DRIVING
      };

      router.route(routeOptions, this.handleResult);
    },

    poll: function() {
      // console.log('SlowWorker.poll');
      if (gmap.SlowWorker.queue.length > 0) {
        gmap.SlowWorker.process(gmap.SlowWorker.queue[0]);
      } else {
        gmap.SlowWorker.running = false;
      }
    },

    handleResult: function(result, status) {
      // console.log('SlowWorker.handleResult');
      var resultPlaces = gmap.SlowWorker.queue.shift();

      if (gmap.SlowWorker.running) {
        setTimeout(gmap.SlowWorker.poll, 200);
      }

      if(status == google.maps.DirectionsStatus.OK) {
        gmap.renderRoute(result);
      } else {
        console.log('getting route failed with status: ' + status);
        gmap.drawPolyLine(resultPlaces);
      }
    }
  },

  buildRenderer: function() {
    rendererOptions = {
      draggable: false, // double check that we actually want this turned on
      markerOptions: {
        draggable: false, 
        visible: true
      },
      polylineOptions: {
        strokeColor: "#000000",
        strokeWeight: 3
      },
      preserveViewport: true
    };

    return new google.maps.DirectionsRenderer(rendererOptions);
  },

  renderRoute: function(result) {
    var renderer = this.buildRenderer();
    renderer.setMap(this.map);
    renderer.setDirections(result);
  },

  drawPolyLine: function(places) {
    polylineOptions = {
        strokeColor: "#000000",
        strokeWeight: 3,
        map: this.map,
        path: [places[0], places[1]],
        geodesic: true
    };

    new google.maps.Polyline(polylineOptions);
  },

  loadScript: function() {
    var script = document.createElement("script");
    script.type = "text/javascript";
    console.log("<%= ENV['GMAP_KEY'] %>")
    script.src = "http://maps.googleapis.com/maps/api/js?key=<%= ENV['GMAP_KEY'] %>&sensor=false&callback=gmap.initialize";
    document.body.appendChild(script);
  },

  mapLoaded: function() {
    console.log('gmap.mapLoaded');
    
    // gmap.projection = gmap.overlay.getProjection();
  },

  getPixelPos: function(lat, lng) {
    var pxlocation = this.projection.fromLatLngToContainerPixel(
      new google.maps.LatLng(
          lat, lng
        )
    );
    return pxlocation;
  },

  getPixelPositions: function(coords) {
    pxlocations = [];
    for (i in coords) {
      pxlocations.push(
        this.getPixelPos(coords[i].lat, coords[i].lng)
      );
    }
    return pxlocations;
  },

  drawRoute: function(coords) {
    console.log('gmap.drawRoute');
    places = [];
    for (i in coords) {
      places.push(
        new google.maps.LatLng(
          coords[i].lat, coords[i].lng
        )
      );
    }

    this.SlowWorker.enqueueAddRoute(places);
  },

  pan: function(lat, lng) {
    gmap.map.panTo(
      new google.maps.LatLng(lat, lng)
    );
  },

  zoom: function(zoom) {
    gmap.map.setZoom(zoom);
  }

};

var main = {
  $photos: null,

  svg: null,

  mapReady: function() {
    console.log('mapReady');

    var photoCoords = this.readPhotosCoords();
    this.drawRoutes(photoCoords);
    this.svg = d3.select("svg");
  },

  readPhotosCoords: function() {
    main.$photos = $('.photo');
    var coords = [];
    for (var i = 0; i < main.$photos.length; i++) {
      $img = $(main.$photos[i]);

      if ($img.data('lat')) {
        var endCoord = {
          lat: +$img.data('lat'),
          lng: +$img.data('lng')
        };

        coords.push(endCoord);
      }
    }

    return coords;
  },

  drawRoutes: function(coords) {
    for(i in coords) {
      if (i > 0) {
        gmap.drawRoute([coords[i-1], coords[i]])
      }
    }
  },

  resize: function() {
    console.log('main.resize');
    var $window = $(window);
    var $document= $(document);
    var maxHeight = $window.height() * 0.9;
    var scrollMod = $window.scrollTop() / ($document.height() - $window.height());
    for (i=0; i<main.$photos.length; i++) {
      var $photo = $(main.$photos[i]);
      $photo.css('max-height', maxHeight);
      $photo.css('margin-top', maxHeight * 0.04);
      $photo.css('margin-bottom', maxHeight * 0.04);
      if ($photo.height() > $photo.width()) {
        $photo.css('width', 'auto');
        $photo.css('height', '');
      } else {
        $photo.css('height', 'auto');
        $photo.css('width', '');
      }
    }
    var newScrollTop = scrollMod * ($document.height() - $window.height());
    $window.scrollTop(newScrollTop);
  },

  update: function() {
    var data = [];
    $window = $(window);

    var windowTop = $window.scrollTop();
    var windowLeft = $window.scrollLeft();
    var windowHeight = $window.height();
    var hideBottom = windowTop + windowHeight + windowHeight * 0.5;
    var hideTop = windowTop - windowHeight * 0.5;

    var $prevPhoto = null;
    var $nextPhoto = null;

    var prevOffset = -100000000;
    var nextOffset = +100000000;

    for (var i = 0; i < main.$photos.length; i++) {
      $img = 
      $img = $(main.$photos[i]);

      var imgTop = $img.offset().top;
      var imgLeft = $img.offset().left;
      var imgHeight = $img.height();
      var imgWidth = $img.width();
      // debugger;
      if ($img.data('lat')) {
        var divOffset = (imgTop + imgHeight / 2) - (windowTop + windowHeight / 2);
        if (divOffset < 0 && divOffset > prevOffset) {
          prevOffset = divOffset;
          $prevPhoto = $img;
          // debugger;
        } else if (divOffset > 0 && divOffset < nextOffset) {
          nextOffset = divOffset;
          $nextPhoto = $img;
          // debugger;
        }
        if (imgTop + imgHeight / 2 > hideTop && imgTop + imgHeight / 2 < hideBottom) {
          var startCoord = 
            {"y": imgTop + imgHeight / 2 - windowTop,
             "x": imgLeft + imgWidth - windowLeft};
          
          var endCoord = 
            gmap.getPixelPos(+$img.data('lat'), +$img.data('lng'));

          data.push([startCoord, endCoord]);
        }
      }
    }

    if(!$prevPhoto && $nextPhoto) {
      gmap.pan(+$nextPhoto.data('lat'), +$nextPhoto.data('lng'))
    } else if (!$nextPhoto && $prevPhoto) {
      gmap.pan(+$prevPhoto.data('lat'), +$prevPhoto.data('lng'))
    } else {
      var offsetDiff = prevOffset - nextOffset;
      var linearMod = prevOffset / offsetDiff;
      var mod = 1 / (1 + Math.pow(Math.E, (-15*(linearMod-0.5))));

      var prevLat = $prevPhoto.data('lat');
      var nextLat = $nextPhoto.data('lat');
      var latDiff = nextLat - prevLat;
    
      if (Math.abs(latDiff) > 180) {
        latDiff = 360 - Math.abs(latDiff)
      }

      var newLat = prevLat + latDiff * mod;

      var prevLng = $prevPhoto.data('lng');
      var nextLng = $nextPhoto.data('lng');
      var lngDiff = nextLng - prevLng;
  
      if (Math.abs(lngDiff) > 180) {
        lngDiff = 360 - Math.abs(lngDiff)
      }

      var newLng = prevLng + lngDiff * mod;

      gmap.pan(newLat, newLng);
    }
    
    var line = d3.svg.line()
      .interpolate(main.interpolateSankey)
      .x(function(d) { return d.x; })
      .y(function(d) { return d.y; });

    var path = main.svg.selectAll('path').data(data);

    path.attr('d', line);

    path.enter().append('path')
        .attr('class', 'line')
        .attr('d', line);

    path.exit().remove();
  },

  // http://bl.ocks.org/mbostock/3960741
  interpolateSankey: function(points) {
    var x0 = points[0][0], y0 = points[0][1], x1, y1, x2,
        path = [x0, ",", y0],
        i = 0,
        n = points.length;
    while (++i < n) {
      x1 = points[i][0], y1 = points[i][1], x2 = (x0 + x1) / 2;
      path.push("C", x2, ",", y0, " ", x2, ",", y1, " ", x1, ",", y1);
      x0 = x1, y0 = y1;
    }
    return path.join("");
  }  
}


$(document).ready(function() {
  gmap.loadScript();

  $(document).on('scroll', main.update);
  $(window).on('load', main.resize);
  $(window).on('resize', main.resize);

  // main.resize();
});